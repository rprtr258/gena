package gena

import (
	"fmt"
	"image/color"
	"strings"
)

var (
	MistyRose        = color.RGBA{R: 0xFF, G: 0xE4, B: 0xE1, A: 0xFF}
	DarkSalmon       = color.RGBA{R: 0xE9, G: 0x96, B: 0x7A, A: 0xFF}
	Tan              = color.RGBA{R: 0xD2, G: 0xB4, B: 0x8C, A: 0xFF}
	Bisque           = color.RGBA{R: 0xFF, G: 0xE4, B: 0xC4, A: 0xFF}
	Mintcream        = color.RGBA{R: 0xF5, G: 0xFF, B: 0xFA, A: 0xFF}
	Aquamarine       = color.RGBA{R: 0x7F, G: 0xFF, B: 0xD4, A: 0xFF}
	Azure            = color.RGBA{R: 0xF0, G: 0xFF, B: 0xFF, A: 0xFF}
	Lavender         = color.RGBA{R: 0xE6, G: 0xE6, B: 0xFA, A: 0xFF}
	Plum             = color.RGBA{R: 0xDD, G: 0xA0, B: 0xDD, A: 0xFF}
	AntiqueWhite     = color.RGBA{R: 0xFA, G: 0xEB, B: 0xD7, A: 0xFF}
	NavajoWhite      = color.RGBA{R: 0xFF, G: 0xDE, B: 0xAD, A: 0xFF}
	Moccasin         = color.RGBA{R: 0xFF, G: 0xE4, B: 0xB5, A: 0xFF}
	MediumAquamarine = color.RGBA{R: 0x66, G: 0xCD, B: 0xAA, A: 0xFF}
	PaleTurquoise    = color.RGBA{R: 0xAF, G: 0xEE, B: 0xEE, A: 0xFF}
	LightPink        = color.RGBA{R: 0xFF, G: 0xB6, B: 0xC1, A: 0xFF}
	Tomato           = color.RGBA{R: 0xFF, G: 0x63, B: 0x47, A: 0xFF}
	Orange           = color.RGBA{R: 0xFF, G: 0xA5, A: 0xFF}
	Black            = color.RGBA{A: 0xFF}
	White            = color.RGBA{R: 0xFF, G: 0xFF, B: 0xFF, A: 0xFF}
	LightGray        = color.RGBA{R: 200, G: 200, B: 200, A: 255}
	Outdoors         = []color.RGBA{
		{67, 110, 165, 255},
		{47, 76, 114, 255},
		{165, 138, 3, 255},
		{242, 182, 4, 255},
		{191, 131, 59, 255},
	}
	Reddery = []color.RGBA{
		{89, 2, 16, 255},
		{37, 2, 5, 255},
		{186, 7, 55, 255},
		{253, 55, 51, 255},
		{245, 169, 167, 255},
	}
	DarkPink = []color.RGBA{
		{2, 64, 89, 255},
		{242, 131, 107, 255},
		{140, 40, 31, 255},
		{191, 69, 57, 255},
		{13, 13, 13, 255},
	}

	DarkRed = []color.RGBA{
		{48, 19, 21, 255},
		{71, 15, 16, 255},
		{92, 10, 12, 255},
		{115, 5, 4, 255},
		{139, 0, 3, 255},
		{163, 32, 1, 255},
		{185, 66, 0, 255},
		{208, 98, 1, 255},
		{231, 133, 0, 255},
		{254, 165, 0, 255},
	}

	Sleek = []color.RGBA{
		{R: 0x2C, G: 0x35, B: 0x31, A: 0xFF},
		{R: 0x11, G: 0x64, B: 0x66, A: 0xFF},
		{R: 0xD9, G: 0xB0, B: 0x8C, A: 0xFF},
		{R: 0xFF, G: 0xCB, B: 0x9A, A: 0xFF},
		{R: 0xD1, G: 0xE8, B: 0xE2, A: 0xFF},
	}

	Energetic = []color.RGBA{
		{R: 0x56, G: 0x80, B: 0xE9, A: 0xFF},
		{R: 0x84, G: 0xCE, B: 0xEB, A: 0xFF},
		{R: 0x5A, G: 0x89, B: 0xEA, A: 0xFF},
		{R: 0xC1, G: 0xC8, B: 0xEA, A: 0xFF},
		{R: 0x88, G: 0x60, B: 0xD0, A: 0xFF},
	}

	Youthful = []color.RGBA{
		{R: 0xA6, G: 0x4A, B: 0xC9, A: 0xFF},
		{R: 0xFC, G: 0xCD, B: 0x04, A: 0xFF},
		{R: 0xFF, G: 0xB4, B: 0x8F, A: 0xFF},
		{R: 0xF5, G: 0xE6, B: 0xCC, A: 0xFF},
		{R: 0x17, G: 0xE9, B: 0xE0, A: 0xFF},
	}

	PinkPastel = []color.RGBA{
		{R: 0xA1, G: 0xC3, B: 0xD1, A: 0xFF},
		{R: 0xB3, G: 0x9B, B: 0xC8, A: 0xFF},
		{R: 0xF0, G: 0xEB, B: 0xF4, A: 0xFF},
		{R: 0xF1, G: 0x72, B: 0xA1, A: 0xFF},
		{R: 0xE6, G: 0x43, B: 0x98, A: 0xFF},
	}

	Citrus = []color.RGBA{
		{R: 0x1F, G: 0x26, B: 0x05, A: 0xFF},
		{R: 0x1F, G: 0x65, B: 0x21, A: 0xFF},
		{R: 0x53, G: 0x90, B: 0x0F, A: 0xFF},
		{R: 0xA4, G: 0xA7, B: 0x1E, A: 0xFF},
		{R: 0xD6, G: 0xCE, B: 0x15, A: 0xFF},
	}

	Cheerful = []color.RGBA{
		{R: 0xFB, G: 0xE8, B: 0xA6, A: 0xFF},
		{R: 0xF4, G: 0x97, B: 0x6C, A: 0xFF},
		{R: 0x30, G: 0x3C, B: 0x6C, A: 0xFF},
		{R: 0xB4, G: 0xDF, B: 0xE5, A: 0xFF},
		{R: 0xD2, G: 0xFD, B: 0xFF, A: 0xFF},
	}

	Earthy = []color.RGBA{
		{R: 0x8D, G: 0x87, B: 0x41, A: 0xFF},
		{R: 0xF4, G: 0x97, B: 0x6C, A: 0xFF},
		{R: 0x30, G: 0x3C, B: 0x6C, A: 0xFF},
		{R: 0xB4, G: 0xDF, B: 0xE5, A: 0xFF},
		{R: 0xD2, G: 0xFD, B: 0xFF, A: 0xFF},
	}

	Plasma = []color.RGBA{
		{0x0c, 0x07, 0x86, 0xff},
		{0x10, 0x07, 0x87, 0xff},
		{0x13, 0x06, 0x89, 0xff},
		{0x15, 0x06, 0x8a, 0xff},
		{0x18, 0x06, 0x8b, 0xff},
		{0x1b, 0x06, 0x8c, 0xff},
		{0x1d, 0x06, 0x8d, 0xff},
		{0x1f, 0x05, 0x8e, 0xff},
		{0x21, 0x05, 0x8f, 0xff},
		{0x23, 0x05, 0x90, 0xff},
		{0x25, 0x05, 0x91, 0xff},
		{0x27, 0x05, 0x92, 0xff},
		{0x29, 0x05, 0x93, 0xff},
		{0x2b, 0x05, 0x94, 0xff},
		{0x2d, 0x04, 0x94, 0xff},
		{0x2f, 0x04, 0x95, 0xff},
		{0x31, 0x04, 0x96, 0xff},
		{0x33, 0x04, 0x97, 0xff},
		{0x34, 0x04, 0x98, 0xff},
		{0x36, 0x04, 0x98, 0xff},
		{0x38, 0x04, 0x99, 0xff},
		{0x3a, 0x04, 0x9a, 0xff},
		{0x3b, 0x03, 0x9a, 0xff},
		{0x3d, 0x03, 0x9b, 0xff},
		{0x3f, 0x03, 0x9c, 0xff},
		{0x40, 0x03, 0x9c, 0xff},
		{0x42, 0x03, 0x9d, 0xff},
		{0x44, 0x03, 0x9e, 0xff},
		{0x45, 0x03, 0x9e, 0xff},
		{0x47, 0x02, 0x9f, 0xff},
		{0x49, 0x02, 0x9f, 0xff},
		{0x4a, 0x02, 0xa0, 0xff},
		{0x4c, 0x02, 0xa1, 0xff},
		{0x4e, 0x02, 0xa1, 0xff},
		{0x4f, 0x02, 0xa2, 0xff},
		{0x51, 0x01, 0xa2, 0xff},
		{0x52, 0x01, 0xa3, 0xff},
		{0x54, 0x01, 0xa3, 0xff},
		{0x56, 0x01, 0xa3, 0xff},
		{0x57, 0x01, 0xa4, 0xff},
		{0x59, 0x01, 0xa4, 0xff},
		{0x5a, 0x00, 0xa5, 0xff},
		{0x5c, 0x00, 0xa5, 0xff},
		{0x5e, 0x00, 0xa5, 0xff},
		{0x5f, 0x00, 0xa6, 0xff},
		{0x61, 0x00, 0xa6, 0xff},
		{0x62, 0x00, 0xa6, 0xff},
		{0x64, 0x00, 0xa7, 0xff},
		{0x65, 0x00, 0xa7, 0xff},
		{0x67, 0x00, 0xa7, 0xff},
		{0x68, 0x00, 0xa7, 0xff},
		{0x6a, 0x00, 0xa7, 0xff},
		{0x6c, 0x00, 0xa8, 0xff},
		{0x6d, 0x00, 0xa8, 0xff},
		{0x6f, 0x00, 0xa8, 0xff},
		{0x70, 0x00, 0xa8, 0xff},
		{0x72, 0x00, 0xa8, 0xff},
		{0x73, 0x00, 0xa8, 0xff},
		{0x75, 0x00, 0xa8, 0xff},
		{0x76, 0x01, 0xa8, 0xff},
		{0x78, 0x01, 0xa8, 0xff},
		{0x79, 0x01, 0xa8, 0xff},
		{0x7b, 0x02, 0xa8, 0xff},
		{0x7c, 0x02, 0xa7, 0xff},
		{0x7e, 0x03, 0xa7, 0xff},
		{0x7f, 0x03, 0xa7, 0xff},
		{0x81, 0x04, 0xa7, 0xff},
		{0x82, 0x04, 0xa7, 0xff},
		{0x84, 0x05, 0xa6, 0xff},
		{0x85, 0x06, 0xa6, 0xff},
		{0x86, 0x07, 0xa6, 0xff},
		{0x88, 0x07, 0xa5, 0xff},
		{0x89, 0x08, 0xa5, 0xff},
		{0x8b, 0x09, 0xa4, 0xff},
		{0x8c, 0x0a, 0xa4, 0xff},
		{0x8e, 0x0c, 0xa4, 0xff},
		{0x8f, 0x0d, 0xa3, 0xff},
		{0x90, 0x0e, 0xa3, 0xff},
		{0x92, 0x0f, 0xa2, 0xff},
		{0x93, 0x10, 0xa1, 0xff},
		{0x95, 0x11, 0xa1, 0xff},
		{0x96, 0x12, 0xa0, 0xff},
		{0x97, 0x13, 0xa0, 0xff},
		{0x99, 0x14, 0x9f, 0xff},
		{0x9a, 0x15, 0x9e, 0xff},
		{0x9b, 0x17, 0x9e, 0xff},
		{0x9d, 0x18, 0x9d, 0xff},
		{0x9e, 0x19, 0x9c, 0xff},
		{0x9f, 0x1a, 0x9b, 0xff},
		{0xa0, 0x1b, 0x9b, 0xff},
		{0xa2, 0x1c, 0x9a, 0xff},
		{0xa3, 0x1d, 0x99, 0xff},
		{0xa4, 0x1e, 0x98, 0xff},
		{0xa5, 0x1f, 0x97, 0xff},
		{0xa7, 0x21, 0x97, 0xff},
		{0xa8, 0x22, 0x96, 0xff},
		{0xa9, 0x23, 0x95, 0xff},
		{0xaa, 0x24, 0x94, 0xff},
		{0xac, 0x25, 0x93, 0xff},
		{0xad, 0x26, 0x92, 0xff},
		{0xae, 0x27, 0x91, 0xff},
		{0xaf, 0x28, 0x90, 0xff},
		{0xb0, 0x2a, 0x8f, 0xff},
		{0xb1, 0x2b, 0x8f, 0xff},
		{0xb2, 0x2c, 0x8e, 0xff},
		{0xb4, 0x2d, 0x8d, 0xff},
		{0xb5, 0x2e, 0x8c, 0xff},
		{0xb6, 0x2f, 0x8b, 0xff},
		{0xb7, 0x30, 0x8a, 0xff},
		{0xb8, 0x32, 0x89, 0xff},
		{0xb9, 0x33, 0x88, 0xff},
		{0xba, 0x34, 0x87, 0xff},
		{0xbb, 0x35, 0x86, 0xff},
		{0xbc, 0x36, 0x85, 0xff},
		{0xbd, 0x37, 0x84, 0xff},
		{0xbe, 0x38, 0x83, 0xff},
		{0xbf, 0x39, 0x82, 0xff},
		{0xc0, 0x3b, 0x81, 0xff},
		{0xc1, 0x3c, 0x80, 0xff},
		{0xc2, 0x3d, 0x80, 0xff},
		{0xc3, 0x3e, 0x7f, 0xff},
		{0xc4, 0x3f, 0x7e, 0xff},
		{0xc5, 0x40, 0x7d, 0xff},
		{0xc6, 0x41, 0x7c, 0xff},
		{0xc7, 0x42, 0x7b, 0xff},
		{0xc8, 0x44, 0x7a, 0xff},
		{0xc9, 0x45, 0x79, 0xff},
		{0xca, 0x46, 0x78, 0xff},
		{0xcb, 0x47, 0x77, 0xff},
		{0xcc, 0x48, 0x76, 0xff},
		{0xcd, 0x49, 0x75, 0xff},
		{0xce, 0x4a, 0x75, 0xff},
		{0xcf, 0x4b, 0x74, 0xff},
		{0xd0, 0x4d, 0x73, 0xff},
		{0xd1, 0x4e, 0x72, 0xff},
		{0xd1, 0x4f, 0x71, 0xff},
		{0xd2, 0x50, 0x70, 0xff},
		{0xd3, 0x51, 0x6f, 0xff},
		{0xd4, 0x52, 0x6e, 0xff},
		{0xd5, 0x53, 0x6d, 0xff},
		{0xd6, 0x55, 0x6d, 0xff},
		{0xd7, 0x56, 0x6c, 0xff},
		{0xd7, 0x57, 0x6b, 0xff},
		{0xd8, 0x58, 0x6a, 0xff},
		{0xd9, 0x59, 0x69, 0xff},
		{0xda, 0x5a, 0x68, 0xff},
		{0xdb, 0x5b, 0x67, 0xff},
		{0xdc, 0x5d, 0x66, 0xff},
		{0xdc, 0x5e, 0x66, 0xff},
		{0xdd, 0x5f, 0x65, 0xff},
		{0xde, 0x60, 0x64, 0xff},
		{0xdf, 0x61, 0x63, 0xff},
		{0xdf, 0x62, 0x62, 0xff},
		{0xe0, 0x64, 0x61, 0xff},
		{0xe1, 0x65, 0x60, 0xff},
		{0xe2, 0x66, 0x60, 0xff},
		{0xe3, 0x67, 0x5f, 0xff},
		{0xe3, 0x68, 0x5e, 0xff},
		{0xe4, 0x6a, 0x5d, 0xff},
		{0xe5, 0x6b, 0x5c, 0xff},
		{0xe5, 0x6c, 0x5b, 0xff},
		{0xe6, 0x6d, 0x5a, 0xff},
		{0xe7, 0x6e, 0x5a, 0xff},
		{0xe8, 0x70, 0x59, 0xff},
		{0xe8, 0x71, 0x58, 0xff},
		{0xe9, 0x72, 0x57, 0xff},
		{0xea, 0x73, 0x56, 0xff},
		{0xea, 0x74, 0x55, 0xff},
		{0xeb, 0x76, 0x54, 0xff},
		{0xec, 0x77, 0x54, 0xff},
		{0xec, 0x78, 0x53, 0xff},
		{0xed, 0x79, 0x52, 0xff},
		{0xed, 0x7b, 0x51, 0xff},
		{0xee, 0x7c, 0x50, 0xff},
		{0xef, 0x7d, 0x4f, 0xff},
		{0xef, 0x7e, 0x4e, 0xff},
		{0xf0, 0x80, 0x4d, 0xff},
		{0xf0, 0x81, 0x4d, 0xff},
		{0xf1, 0x82, 0x4c, 0xff},
		{0xf2, 0x84, 0x4b, 0xff},
		{0xf2, 0x85, 0x4a, 0xff},
		{0xf3, 0x86, 0x49, 0xff},
		{0xf3, 0x87, 0x48, 0xff},
		{0xf4, 0x89, 0x47, 0xff},
		{0xf4, 0x8a, 0x47, 0xff},
		{0xf5, 0x8b, 0x46, 0xff},
		{0xf5, 0x8d, 0x45, 0xff},
		{0xf6, 0x8e, 0x44, 0xff},
		{0xf6, 0x8f, 0x43, 0xff},
		{0xf6, 0x91, 0x42, 0xff},
		{0xf7, 0x92, 0x41, 0xff},
		{0xf7, 0x93, 0x41, 0xff},
		{0xf8, 0x95, 0x40, 0xff},
		{0xf8, 0x96, 0x3f, 0xff},
		{0xf8, 0x98, 0x3e, 0xff},
		{0xf9, 0x99, 0x3d, 0xff},
		{0xf9, 0x9a, 0x3c, 0xff},
		{0xfa, 0x9c, 0x3b, 0xff},
		{0xfa, 0x9d, 0x3a, 0xff},
		{0xfa, 0x9f, 0x3a, 0xff},
		{0xfa, 0xa0, 0x39, 0xff},
		{0xfb, 0xa2, 0x38, 0xff},
		{0xfb, 0xa3, 0x37, 0xff},
		{0xfb, 0xa4, 0x36, 0xff},
		{0xfc, 0xa6, 0x35, 0xff},
		{0xfc, 0xa7, 0x35, 0xff},
		{0xfc, 0xa9, 0x34, 0xff},
		{0xfc, 0xaa, 0x33, 0xff},
		{0xfc, 0xac, 0x32, 0xff},
		{0xfc, 0xad, 0x31, 0xff},
		{0xfd, 0xaf, 0x31, 0xff},
		{0xfd, 0xb0, 0x30, 0xff},
		{0xfd, 0xb2, 0x2f, 0xff},
		{0xfd, 0xb3, 0x2e, 0xff},
		{0xfd, 0xb5, 0x2d, 0xff},
		{0xfd, 0xb6, 0x2d, 0xff},
		{0xfd, 0xb8, 0x2c, 0xff},
		{0xfd, 0xb9, 0x2b, 0xff},
		{0xfd, 0xbb, 0x2b, 0xff},
		{0xfd, 0xbc, 0x2a, 0xff},
		{0xfd, 0xbe, 0x29, 0xff},
		{0xfd, 0xc0, 0x29, 0xff},
		{0xfd, 0xc1, 0x28, 0xff},
		{0xfd, 0xc3, 0x28, 0xff},
		{0xfd, 0xc4, 0x27, 0xff},
		{0xfd, 0xc6, 0x26, 0xff},
		{0xfc, 0xc7, 0x26, 0xff},
		{0xfc, 0xc9, 0x26, 0xff},
		{0xfc, 0xcb, 0x25, 0xff},
		{0xfc, 0xcc, 0x25, 0xff},
		{0xfc, 0xce, 0x25, 0xff},
		{0xfb, 0xd0, 0x24, 0xff},
		{0xfb, 0xd1, 0x24, 0xff},
		{0xfb, 0xd3, 0x24, 0xff},
		{0xfa, 0xd5, 0x24, 0xff},
		{0xfa, 0xd6, 0x24, 0xff},
		{0xfa, 0xd8, 0x24, 0xff},
		{0xf9, 0xd9, 0x24, 0xff},
		{0xf9, 0xdb, 0x24, 0xff},
		{0xf8, 0xdd, 0x24, 0xff},
		{0xf8, 0xdf, 0x24, 0xff},
		{0xf7, 0xe0, 0x24, 0xff},
		{0xf7, 0xe2, 0x25, 0xff},
		{0xf6, 0xe4, 0x25, 0xff},
		{0xf6, 0xe5, 0x25, 0xff},
		{0xf5, 0xe7, 0x26, 0xff},
		{0xf5, 0xe9, 0x26, 0xff},
		{0xf4, 0xea, 0x26, 0xff},
		{0xf3, 0xec, 0x26, 0xff},
		{0xf3, 0xee, 0x26, 0xff},
		{0xf2, 0xf0, 0x26, 0xff},
		{0xf2, 0xf1, 0x26, 0xff},
		{0xf1, 0xf3, 0x26, 0xff},
		{0xf0, 0xf5, 0x25, 0xff},
		{0xf0, 0xf6, 0x23, 0xff},
		{0xef, 0xf8, 0x21, 0xff},
	}
)

// ParseHexColor parses color string likes #FFFFFF or #2398EFFF
func ParseHexColor(s string) (color.RGBA, error) {
	s = strings.TrimSpace(strings.ToLower(s))

	if !strings.HasPrefix(s, "#") {
		return Black, fmt.Errorf("invalid hex color string %v", s)
	}

	if c, ok := parseHex(s[1:]); ok {
		return c, nil
	}

	return Black, fmt.Errorf("invalid hex color string %v", s)
}

// parseHex returns a color.RGBA by parsing a hex string
// Reference: https://stackoverflow.com/questions/54197913/parse-hex-string-to-image-color
func parseHex(s string) (color.RGBA, bool) {
	c := color.RGBA{}
	c.A = 255
	ok := true

	hexToByte := func(b byte) byte {
		switch {
		case b >= '0' && b <= '9':
			return b - '0'
		case b >= 'a' && b <= 'f':
			return b - 'a' + 10
		default:
			ok = false
			return 0
		}
	}

	n := len(s)
	switch n {
	case 6, 8:
		c.R = hexToByte(s[0])<<4 + hexToByte(s[1])
		c.G = hexToByte(s[2])<<4 + hexToByte(s[3])
		c.B = hexToByte(s[4])<<4 + hexToByte(s[5])
		if n == 8 {
			c.A = hexToByte(s[6])<<4 + hexToByte(s[7])
		}
	case 3, 4:
		c.R = hexToByte(s[0]) * 17
		c.G = hexToByte(s[1]) * 17
		c.B = hexToByte(s[2]) * 17
		if n == 4 {
			c.A = hexToByte(s[3]) * 17
		}
	default:
		ok = false
	}
	return c, ok
}
