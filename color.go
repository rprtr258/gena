package gena

import (
	"fmt"
	"image/color"
)

var (
	// base colors
	Red   = color.RGBA{0xFF, 0x00, 0x00, 0xFF}
	Green = color.RGBA{0x00, 0xFF, 0x00, 0xFF}
	Blue  = color.RGBA{0x00, 0x00, 0xFF, 0xFF}

	Black     = color.RGBA{0x00, 0x00, 0x00, 0xFF}
	LightGray = color.RGBA{0xC8, 0xC8, 0xC8, 0xFF}
	White     = color.RGBA{0xFF, 0xFF, 0xFF, 0xFF}

	MistyRose        = color.RGBA{0xFF, 0xE4, 0xE1, 0xFF}
	DarkSalmon       = color.RGBA{0xE9, 0x96, 0x7A, 0xFF}
	Tan              = color.RGBA{0xD2, 0xB4, 0x8C, 0xFF}
	Bisque           = color.RGBA{0xFF, 0xE4, 0xC4, 0xFF}
	Mintcream        = color.RGBA{0xF5, 0xFF, 0xFA, 0xFF}
	Aquamarine       = color.RGBA{0x7F, 0xFF, 0xD4, 0xFF}
	Azure            = color.RGBA{0xF0, 0xFF, 0xFF, 0xFF}
	Lavender         = color.RGBA{0xE6, 0xE6, 0xFA, 0xFF}
	Plum             = color.RGBA{0xDD, 0xA0, 0xDD, 0xFF}
	AntiqueWhite     = color.RGBA{0xFA, 0xEB, 0xD7, 0xFF}
	NavajoWhite      = color.RGBA{0xFF, 0xDE, 0xAD, 0xFF}
	Moccasin         = color.RGBA{0xFF, 0xE4, 0xB5, 0xFF}
	MediumAquamarine = color.RGBA{0x66, 0xCD, 0xAA, 0xFF}
	PaleTurquoise    = color.RGBA{0xAF, 0xEE, 0xEE, 0xFF}
	LightPink        = color.RGBA{0xFF, 0xB6, 0xC1, 0xFF}
	Tomato           = color.RGBA{0xFF, 0x63, 0x47, 0xFF}
	Orange           = color.RGBA{0xFF, 0xA5, 0x00, 0xFF}
	Outdoors         = []color.RGBA{
		{67, 110, 165, 255},
		{47, 76, 114, 255},
		{165, 138, 3, 255},
		{242, 182, 4, 255},
		{191, 131, 59, 255},
	}
	Reddery = []color.RGBA{
		{89, 2, 16, 255},
		{37, 2, 5, 255},
		{186, 7, 55, 255},
		{253, 55, 51, 255},
		{245, 169, 167, 255},
	}
	DarkPink = []color.RGBA{
		{2, 64, 89, 255},
		{242, 131, 107, 255},
		{140, 40, 31, 255},
		{191, 69, 57, 255},
		{13, 13, 13, 255},
	}

	DarkRed = []color.RGBA{
		{48, 19, 21, 255},
		{71, 15, 16, 255},
		{92, 10, 12, 255},
		{115, 5, 4, 255},
		{139, 0, 3, 255},
		{163, 32, 1, 255},
		{185, 66, 0, 255},
		{208, 98, 1, 255},
		{231, 133, 0, 255},
		{254, 165, 0, 255},
	}

	Sleek = []color.RGBA{
		{0x2C, 0x35, 0x31, 0xFF},
		{0x11, 0x64, 0x66, 0xFF},
		{0xD9, 0xB0, 0x8C, 0xFF},
		{0xFF, 0xCB, 0x9A, 0xFF},
		{0xD1, 0xE8, 0xE2, 0xFF},
	}

	Energetic = []color.RGBA{
		{0x56, 0x80, 0xE9, 0xFF},
		{0x84, 0xCE, 0xEB, 0xFF},
		{0x5A, 0x89, 0xEA, 0xFF},
		{0xC1, 0xC8, 0xEA, 0xFF},
		{0x88, 0x60, 0xD0, 0xFF},
	}

	Youthful = []color.RGBA{
		{0xA6, 0x4A, 0xC9, 0xFF},
		{0xFC, 0xCD, 0x04, 0xFF},
		{0xFF, 0xB4, 0x8F, 0xFF},
		{0xF5, 0xE6, 0xCC, 0xFF},
		{0x17, 0xE9, 0xE0, 0xFF},
	}

	PinkPastel = []color.RGBA{
		{0xA1, 0xC3, 0xD1, 0xFF},
		{0xB3, 0x9B, 0xC8, 0xFF},
		{0xF0, 0xEB, 0xF4, 0xFF},
		{0xF1, 0x72, 0xA1, 0xFF},
		{0xE6, 0x43, 0x98, 0xFF},
	}

	Citrus = []color.RGBA{
		{0x1F, 0x26, 0x05, 0xFF},
		{0x1F, 0x65, 0x21, 0xFF},
		{0x53, 0x90, 0x0F, 0xFF},
		{0xA4, 0xA7, 0x1E, 0xFF},
		{0xD6, 0xCE, 0x15, 0xFF},
	}

	Cheerful = []color.RGBA{
		{0xFB, 0xE8, 0xA6, 0xFF},
		{0xF4, 0x97, 0x6C, 0xFF},
		{0x30, 0x3C, 0x6C, 0xFF},
		{0xB4, 0xDF, 0xE5, 0xFF},
		{0xD2, 0xFD, 0xFF, 0xFF},
	}

	Earthy = []color.RGBA{
		{0x8D, 0x87, 0x41, 0xFF},
		{0xF4, 0x97, 0x6C, 0xFF},
		{0x30, 0x3C, 0x6C, 0xFF},
		{0xB4, 0xDF, 0xE5, 0xFF},
		{0xD2, 0xFD, 0xFF, 0xFF},
	}

	Plasma = []color.RGBA{
		{0x0c, 0x07, 0x86, 0xff},
		{0x10, 0x07, 0x87, 0xff},
		{0x13, 0x06, 0x89, 0xff},
		{0x15, 0x06, 0x8a, 0xff},
		{0x18, 0x06, 0x8b, 0xff},
		{0x1b, 0x06, 0x8c, 0xff},
		{0x1d, 0x06, 0x8d, 0xff},
		{0x1f, 0x05, 0x8e, 0xff},
		{0x21, 0x05, 0x8f, 0xff},
		{0x23, 0x05, 0x90, 0xff},
		{0x25, 0x05, 0x91, 0xff},
		{0x27, 0x05, 0x92, 0xff},
		{0x29, 0x05, 0x93, 0xff},
		{0x2b, 0x05, 0x94, 0xff},
		{0x2d, 0x04, 0x94, 0xff},
		{0x2f, 0x04, 0x95, 0xff},
		{0x31, 0x04, 0x96, 0xff},
		{0x33, 0x04, 0x97, 0xff},
		{0x34, 0x04, 0x98, 0xff},
		{0x36, 0x04, 0x98, 0xff},
		{0x38, 0x04, 0x99, 0xff},
		{0x3a, 0x04, 0x9a, 0xff},
		{0x3b, 0x03, 0x9a, 0xff},
		{0x3d, 0x03, 0x9b, 0xff},
		{0x3f, 0x03, 0x9c, 0xff},
		{0x40, 0x03, 0x9c, 0xff},
		{0x42, 0x03, 0x9d, 0xff},
		{0x44, 0x03, 0x9e, 0xff},
		{0x45, 0x03, 0x9e, 0xff},
		{0x47, 0x02, 0x9f, 0xff},
		{0x49, 0x02, 0x9f, 0xff},
		{0x4a, 0x02, 0xa0, 0xff},
		{0x4c, 0x02, 0xa1, 0xff},
		{0x4e, 0x02, 0xa1, 0xff},
		{0x4f, 0x02, 0xa2, 0xff},
		{0x51, 0x01, 0xa2, 0xff},
		{0x52, 0x01, 0xa3, 0xff},
		{0x54, 0x01, 0xa3, 0xff},
		{0x56, 0x01, 0xa3, 0xff},
		{0x57, 0x01, 0xa4, 0xff},
		{0x59, 0x01, 0xa4, 0xff},
		{0x5a, 0x00, 0xa5, 0xff},
		{0x5c, 0x00, 0xa5, 0xff},
		{0x5e, 0x00, 0xa5, 0xff},
		{0x5f, 0x00, 0xa6, 0xff},
		{0x61, 0x00, 0xa6, 0xff},
		{0x62, 0x00, 0xa6, 0xff},
		{0x64, 0x00, 0xa7, 0xff},
		{0x65, 0x00, 0xa7, 0xff},
		{0x67, 0x00, 0xa7, 0xff},
		{0x68, 0x00, 0xa7, 0xff},
		{0x6a, 0x00, 0xa7, 0xff},
		{0x6c, 0x00, 0xa8, 0xff},
		{0x6d, 0x00, 0xa8, 0xff},
		{0x6f, 0x00, 0xa8, 0xff},
		{0x70, 0x00, 0xa8, 0xff},
		{0x72, 0x00, 0xa8, 0xff},
		{0x73, 0x00, 0xa8, 0xff},
		{0x75, 0x00, 0xa8, 0xff},
		{0x76, 0x01, 0xa8, 0xff},
		{0x78, 0x01, 0xa8, 0xff},
		{0x79, 0x01, 0xa8, 0xff},
		{0x7b, 0x02, 0xa8, 0xff},
		{0x7c, 0x02, 0xa7, 0xff},
		{0x7e, 0x03, 0xa7, 0xff},
		{0x7f, 0x03, 0xa7, 0xff},
		{0x81, 0x04, 0xa7, 0xff},
		{0x82, 0x04, 0xa7, 0xff},
		{0x84, 0x05, 0xa6, 0xff},
		{0x85, 0x06, 0xa6, 0xff},
		{0x86, 0x07, 0xa6, 0xff},
		{0x88, 0x07, 0xa5, 0xff},
		{0x89, 0x08, 0xa5, 0xff},
		{0x8b, 0x09, 0xa4, 0xff},
		{0x8c, 0x0a, 0xa4, 0xff},
		{0x8e, 0x0c, 0xa4, 0xff},
		{0x8f, 0x0d, 0xa3, 0xff},
		{0x90, 0x0e, 0xa3, 0xff},
		{0x92, 0x0f, 0xa2, 0xff},
		{0x93, 0x10, 0xa1, 0xff},
		{0x95, 0x11, 0xa1, 0xff},
		{0x96, 0x12, 0xa0, 0xff},
		{0x97, 0x13, 0xa0, 0xff},
		{0x99, 0x14, 0x9f, 0xff},
		{0x9a, 0x15, 0x9e, 0xff},
		{0x9b, 0x17, 0x9e, 0xff},
		{0x9d, 0x18, 0x9d, 0xff},
		{0x9e, 0x19, 0x9c, 0xff},
		{0x9f, 0x1a, 0x9b, 0xff},
		{0xa0, 0x1b, 0x9b, 0xff},
		{0xa2, 0x1c, 0x9a, 0xff},
		{0xa3, 0x1d, 0x99, 0xff},
		{0xa4, 0x1e, 0x98, 0xff},
		{0xa5, 0x1f, 0x97, 0xff},
		{0xa7, 0x21, 0x97, 0xff},
		{0xa8, 0x22, 0x96, 0xff},
		{0xa9, 0x23, 0x95, 0xff},
		{0xaa, 0x24, 0x94, 0xff},
		{0xac, 0x25, 0x93, 0xff},
		{0xad, 0x26, 0x92, 0xff},
		{0xae, 0x27, 0x91, 0xff},
		{0xaf, 0x28, 0x90, 0xff},
		{0xb0, 0x2a, 0x8f, 0xff},
		{0xb1, 0x2b, 0x8f, 0xff},
		{0xb2, 0x2c, 0x8e, 0xff},
		{0xb4, 0x2d, 0x8d, 0xff},
		{0xb5, 0x2e, 0x8c, 0xff},
		{0xb6, 0x2f, 0x8b, 0xff},
		{0xb7, 0x30, 0x8a, 0xff},
		{0xb8, 0x32, 0x89, 0xff},
		{0xb9, 0x33, 0x88, 0xff},
		{0xba, 0x34, 0x87, 0xff},
		{0xbb, 0x35, 0x86, 0xff},
		{0xbc, 0x36, 0x85, 0xff},
		{0xbd, 0x37, 0x84, 0xff},
		{0xbe, 0x38, 0x83, 0xff},
		{0xbf, 0x39, 0x82, 0xff},
		{0xc0, 0x3b, 0x81, 0xff},
		{0xc1, 0x3c, 0x80, 0xff},
		{0xc2, 0x3d, 0x80, 0xff},
		{0xc3, 0x3e, 0x7f, 0xff},
		{0xc4, 0x3f, 0x7e, 0xff},
		{0xc5, 0x40, 0x7d, 0xff},
		{0xc6, 0x41, 0x7c, 0xff},
		{0xc7, 0x42, 0x7b, 0xff},
		{0xc8, 0x44, 0x7a, 0xff},
		{0xc9, 0x45, 0x79, 0xff},
		{0xca, 0x46, 0x78, 0xff},
		{0xcb, 0x47, 0x77, 0xff},
		{0xcc, 0x48, 0x76, 0xff},
		{0xcd, 0x49, 0x75, 0xff},
		{0xce, 0x4a, 0x75, 0xff},
		{0xcf, 0x4b, 0x74, 0xff},
		{0xd0, 0x4d, 0x73, 0xff},
		{0xd1, 0x4e, 0x72, 0xff},
		{0xd1, 0x4f, 0x71, 0xff},
		{0xd2, 0x50, 0x70, 0xff},
		{0xd3, 0x51, 0x6f, 0xff},
		{0xd4, 0x52, 0x6e, 0xff},
		{0xd5, 0x53, 0x6d, 0xff},
		{0xd6, 0x55, 0x6d, 0xff},
		{0xd7, 0x56, 0x6c, 0xff},
		{0xd7, 0x57, 0x6b, 0xff},
		{0xd8, 0x58, 0x6a, 0xff},
		{0xd9, 0x59, 0x69, 0xff},
		{0xda, 0x5a, 0x68, 0xff},
		{0xdb, 0x5b, 0x67, 0xff},
		{0xdc, 0x5d, 0x66, 0xff},
		{0xdc, 0x5e, 0x66, 0xff},
		{0xdd, 0x5f, 0x65, 0xff},
		{0xde, 0x60, 0x64, 0xff},
		{0xdf, 0x61, 0x63, 0xff},
		{0xdf, 0x62, 0x62, 0xff},
		{0xe0, 0x64, 0x61, 0xff},
		{0xe1, 0x65, 0x60, 0xff},
		{0xe2, 0x66, 0x60, 0xff},
		{0xe3, 0x67, 0x5f, 0xff},
		{0xe3, 0x68, 0x5e, 0xff},
		{0xe4, 0x6a, 0x5d, 0xff},
		{0xe5, 0x6b, 0x5c, 0xff},
		{0xe5, 0x6c, 0x5b, 0xff},
		{0xe6, 0x6d, 0x5a, 0xff},
		{0xe7, 0x6e, 0x5a, 0xff},
		{0xe8, 0x70, 0x59, 0xff},
		{0xe8, 0x71, 0x58, 0xff},
		{0xe9, 0x72, 0x57, 0xff},
		{0xea, 0x73, 0x56, 0xff},
		{0xea, 0x74, 0x55, 0xff},
		{0xeb, 0x76, 0x54, 0xff},
		{0xec, 0x77, 0x54, 0xff},
		{0xec, 0x78, 0x53, 0xff},
		{0xed, 0x79, 0x52, 0xff},
		{0xed, 0x7b, 0x51, 0xff},
		{0xee, 0x7c, 0x50, 0xff},
		{0xef, 0x7d, 0x4f, 0xff},
		{0xef, 0x7e, 0x4e, 0xff},
		{0xf0, 0x80, 0x4d, 0xff},
		{0xf0, 0x81, 0x4d, 0xff},
		{0xf1, 0x82, 0x4c, 0xff},
		{0xf2, 0x84, 0x4b, 0xff},
		{0xf2, 0x85, 0x4a, 0xff},
		{0xf3, 0x86, 0x49, 0xff},
		{0xf3, 0x87, 0x48, 0xff},
		{0xf4, 0x89, 0x47, 0xff},
		{0xf4, 0x8a, 0x47, 0xff},
		{0xf5, 0x8b, 0x46, 0xff},
		{0xf5, 0x8d, 0x45, 0xff},
		{0xf6, 0x8e, 0x44, 0xff},
		{0xf6, 0x8f, 0x43, 0xff},
		{0xf6, 0x91, 0x42, 0xff},
		{0xf7, 0x92, 0x41, 0xff},
		{0xf7, 0x93, 0x41, 0xff},
		{0xf8, 0x95, 0x40, 0xff},
		{0xf8, 0x96, 0x3f, 0xff},
		{0xf8, 0x98, 0x3e, 0xff},
		{0xf9, 0x99, 0x3d, 0xff},
		{0xf9, 0x9a, 0x3c, 0xff},
		{0xfa, 0x9c, 0x3b, 0xff},
		{0xfa, 0x9d, 0x3a, 0xff},
		{0xfa, 0x9f, 0x3a, 0xff},
		{0xfa, 0xa0, 0x39, 0xff},
		{0xfb, 0xa2, 0x38, 0xff},
		{0xfb, 0xa3, 0x37, 0xff},
		{0xfb, 0xa4, 0x36, 0xff},
		{0xfc, 0xa6, 0x35, 0xff},
		{0xfc, 0xa7, 0x35, 0xff},
		{0xfc, 0xa9, 0x34, 0xff},
		{0xfc, 0xaa, 0x33, 0xff},
		{0xfc, 0xac, 0x32, 0xff},
		{0xfc, 0xad, 0x31, 0xff},
		{0xfd, 0xaf, 0x31, 0xff},
		{0xfd, 0xb0, 0x30, 0xff},
		{0xfd, 0xb2, 0x2f, 0xff},
		{0xfd, 0xb3, 0x2e, 0xff},
		{0xfd, 0xb5, 0x2d, 0xff},
		{0xfd, 0xb6, 0x2d, 0xff},
		{0xfd, 0xb8, 0x2c, 0xff},
		{0xfd, 0xb9, 0x2b, 0xff},
		{0xfd, 0xbb, 0x2b, 0xff},
		{0xfd, 0xbc, 0x2a, 0xff},
		{0xfd, 0xbe, 0x29, 0xff},
		{0xfd, 0xc0, 0x29, 0xff},
		{0xfd, 0xc1, 0x28, 0xff},
		{0xfd, 0xc3, 0x28, 0xff},
		{0xfd, 0xc4, 0x27, 0xff},
		{0xfd, 0xc6, 0x26, 0xff},
		{0xfc, 0xc7, 0x26, 0xff},
		{0xfc, 0xc9, 0x26, 0xff},
		{0xfc, 0xcb, 0x25, 0xff},
		{0xfc, 0xcc, 0x25, 0xff},
		{0xfc, 0xce, 0x25, 0xff},
		{0xfb, 0xd0, 0x24, 0xff},
		{0xfb, 0xd1, 0x24, 0xff},
		{0xfb, 0xd3, 0x24, 0xff},
		{0xfa, 0xd5, 0x24, 0xff},
		{0xfa, 0xd6, 0x24, 0xff},
		{0xfa, 0xd8, 0x24, 0xff},
		{0xf9, 0xd9, 0x24, 0xff},
		{0xf9, 0xdb, 0x24, 0xff},
		{0xf8, 0xdd, 0x24, 0xff},
		{0xf8, 0xdf, 0x24, 0xff},
		{0xf7, 0xe0, 0x24, 0xff},
		{0xf7, 0xe2, 0x25, 0xff},
		{0xf6, 0xe4, 0x25, 0xff},
		{0xf6, 0xe5, 0x25, 0xff},
		{0xf5, 0xe7, 0x26, 0xff},
		{0xf5, 0xe9, 0x26, 0xff},
		{0xf4, 0xea, 0x26, 0xff},
		{0xf3, 0xec, 0x26, 0xff},
		{0xf3, 0xee, 0x26, 0xff},
		{0xf2, 0xf0, 0x26, 0xff},
		{0xf2, 0xf1, 0x26, 0xff},
		{0xf1, 0xf3, 0x26, 0xff},
		{0xf0, 0xf5, 0x25, 0xff},
		{0xf0, 0xf6, 0x23, 0xff},
		{0xef, 0xf8, 0x21, 0xff},
	}
	Viridis = []color.RGBA{
		{0x44, 0x01, 0x54, 0xff},
		{0x44, 0x02, 0x55, 0xff},
		{0x44, 0x03, 0x57, 0xff},
		{0x45, 0x05, 0x58, 0xff},
		{0x45, 0x06, 0x5a, 0xff},
		{0x45, 0x08, 0x5b, 0xff},
		{0x46, 0x09, 0x5c, 0xff},
		{0x46, 0x0b, 0x5e, 0xff},
		{0x46, 0x0c, 0x5f, 0xff},
		{0x46, 0x0e, 0x61, 0xff},
		{0x47, 0x0f, 0x62, 0xff},
		{0x47, 0x11, 0x63, 0xff},
		{0x47, 0x12, 0x65, 0xff},
		{0x47, 0x14, 0x66, 0xff},
		{0x47, 0x15, 0x67, 0xff},
		{0x47, 0x16, 0x69, 0xff},
		{0x47, 0x18, 0x6a, 0xff},
		{0x48, 0x19, 0x6b, 0xff},
		{0x48, 0x1a, 0x6c, 0xff},
		{0x48, 0x1c, 0x6e, 0xff},
		{0x48, 0x1d, 0x6f, 0xff},
		{0x48, 0x1e, 0x70, 0xff},
		{0x48, 0x20, 0x71, 0xff},
		{0x48, 0x21, 0x72, 0xff},
		{0x48, 0x22, 0x73, 0xff},
		{0x48, 0x23, 0x74, 0xff},
		{0x47, 0x25, 0x75, 0xff},
		{0x47, 0x26, 0x76, 0xff},
		{0x47, 0x27, 0x77, 0xff},
		{0x47, 0x28, 0x78, 0xff},
		{0x47, 0x2a, 0x79, 0xff},
		{0x47, 0x2b, 0x7a, 0xff},
		{0x47, 0x2c, 0x7b, 0xff},
		{0x46, 0x2d, 0x7c, 0xff},
		{0x46, 0x2f, 0x7c, 0xff},
		{0x46, 0x30, 0x7d, 0xff},
		{0x46, 0x31, 0x7e, 0xff},
		{0x45, 0x32, 0x7f, 0xff},
		{0x45, 0x34, 0x7f, 0xff},
		{0x45, 0x35, 0x80, 0xff},
		{0x45, 0x36, 0x81, 0xff},
		{0x44, 0x37, 0x81, 0xff},
		{0x44, 0x39, 0x82, 0xff},
		{0x43, 0x3a, 0x83, 0xff},
		{0x43, 0x3b, 0x83, 0xff},
		{0x43, 0x3c, 0x84, 0xff},
		{0x42, 0x3d, 0x84, 0xff},
		{0x42, 0x3e, 0x85, 0xff},
		{0x42, 0x40, 0x85, 0xff},
		{0x41, 0x41, 0x86, 0xff},
		{0x41, 0x42, 0x86, 0xff},
		{0x40, 0x43, 0x87, 0xff},
		{0x40, 0x44, 0x87, 0xff},
		{0x3f, 0x45, 0x87, 0xff},
		{0x3f, 0x47, 0x88, 0xff},
		{0x3e, 0x48, 0x88, 0xff},
		{0x3e, 0x49, 0x89, 0xff},
		{0x3d, 0x4a, 0x89, 0xff},
		{0x3d, 0x4b, 0x89, 0xff},
		{0x3d, 0x4c, 0x89, 0xff},
		{0x3c, 0x4d, 0x8a, 0xff},
		{0x3c, 0x4e, 0x8a, 0xff},
		{0x3b, 0x50, 0x8a, 0xff},
		{0x3b, 0x51, 0x8a, 0xff},
		{0x3a, 0x52, 0x8b, 0xff},
		{0x3a, 0x53, 0x8b, 0xff},
		{0x39, 0x54, 0x8b, 0xff},
		{0x39, 0x55, 0x8b, 0xff},
		{0x38, 0x56, 0x8b, 0xff},
		{0x38, 0x57, 0x8c, 0xff},
		{0x37, 0x58, 0x8c, 0xff},
		{0x37, 0x59, 0x8c, 0xff},
		{0x36, 0x5a, 0x8c, 0xff},
		{0x36, 0x5b, 0x8c, 0xff},
		{0x35, 0x5c, 0x8c, 0xff},
		{0x35, 0x5d, 0x8c, 0xff},
		{0x34, 0x5e, 0x8d, 0xff},
		{0x34, 0x5f, 0x8d, 0xff},
		{0x33, 0x60, 0x8d, 0xff},
		{0x33, 0x61, 0x8d, 0xff},
		{0x32, 0x62, 0x8d, 0xff},
		{0x32, 0x63, 0x8d, 0xff},
		{0x31, 0x64, 0x8d, 0xff},
		{0x31, 0x65, 0x8d, 0xff},
		{0x31, 0x66, 0x8d, 0xff},
		{0x30, 0x67, 0x8d, 0xff},
		{0x30, 0x68, 0x8d, 0xff},
		{0x2f, 0x69, 0x8d, 0xff},
		{0x2f, 0x6a, 0x8d, 0xff},
		{0x2e, 0x6b, 0x8e, 0xff},
		{0x2e, 0x6c, 0x8e, 0xff},
		{0x2e, 0x6d, 0x8e, 0xff},
		{0x2d, 0x6e, 0x8e, 0xff},
		{0x2d, 0x6f, 0x8e, 0xff},
		{0x2c, 0x70, 0x8e, 0xff},
		{0x2c, 0x71, 0x8e, 0xff},
		{0x2c, 0x72, 0x8e, 0xff},
		{0x2b, 0x73, 0x8e, 0xff},
		{0x2b, 0x74, 0x8e, 0xff},
		{0x2a, 0x75, 0x8e, 0xff},
		{0x2a, 0x76, 0x8e, 0xff},
		{0x2a, 0x77, 0x8e, 0xff},
		{0x29, 0x78, 0x8e, 0xff},
		{0x29, 0x79, 0x8e, 0xff},
		{0x28, 0x7a, 0x8e, 0xff},
		{0x28, 0x7a, 0x8e, 0xff},
		{0x28, 0x7b, 0x8e, 0xff},
		{0x27, 0x7c, 0x8e, 0xff},
		{0x27, 0x7d, 0x8e, 0xff},
		{0x27, 0x7e, 0x8e, 0xff},
		{0x26, 0x7f, 0x8e, 0xff},
		{0x26, 0x80, 0x8e, 0xff},
		{0x26, 0x81, 0x8e, 0xff},
		{0x25, 0x82, 0x8e, 0xff},
		{0x25, 0x83, 0x8d, 0xff},
		{0x24, 0x84, 0x8d, 0xff},
		{0x24, 0x85, 0x8d, 0xff},
		{0x24, 0x86, 0x8d, 0xff},
		{0x23, 0x87, 0x8d, 0xff},
		{0x23, 0x88, 0x8d, 0xff},
		{0x23, 0x89, 0x8d, 0xff},
		{0x22, 0x89, 0x8d, 0xff},
		{0x22, 0x8a, 0x8d, 0xff},
		{0x22, 0x8b, 0x8d, 0xff},
		{0x21, 0x8c, 0x8d, 0xff},
		{0x21, 0x8d, 0x8c, 0xff},
		{0x21, 0x8e, 0x8c, 0xff},
		{0x20, 0x8f, 0x8c, 0xff},
		{0x20, 0x90, 0x8c, 0xff},
		{0x20, 0x91, 0x8c, 0xff},
		{0x1f, 0x92, 0x8c, 0xff},
		{0x1f, 0x93, 0x8b, 0xff},
		{0x1f, 0x94, 0x8b, 0xff},
		{0x1f, 0x95, 0x8b, 0xff},
		{0x1f, 0x96, 0x8b, 0xff},
		{0x1e, 0x97, 0x8a, 0xff},
		{0x1e, 0x98, 0x8a, 0xff},
		{0x1e, 0x99, 0x8a, 0xff},
		{0x1e, 0x99, 0x8a, 0xff},
		{0x1e, 0x9a, 0x89, 0xff},
		{0x1e, 0x9b, 0x89, 0xff},
		{0x1e, 0x9c, 0x89, 0xff},
		{0x1e, 0x9d, 0x88, 0xff},
		{0x1e, 0x9e, 0x88, 0xff},
		{0x1e, 0x9f, 0x88, 0xff},
		{0x1e, 0xa0, 0x87, 0xff},
		{0x1f, 0xa1, 0x87, 0xff},
		{0x1f, 0xa2, 0x86, 0xff},
		{0x1f, 0xa3, 0x86, 0xff},
		{0x20, 0xa4, 0x85, 0xff},
		{0x20, 0xa5, 0x85, 0xff},
		{0x21, 0xa6, 0x85, 0xff},
		{0x21, 0xa7, 0x84, 0xff},
		{0x22, 0xa7, 0x84, 0xff},
		{0x23, 0xa8, 0x83, 0xff},
		{0x23, 0xa9, 0x82, 0xff},
		{0x24, 0xaa, 0x82, 0xff},
		{0x25, 0xab, 0x81, 0xff},
		{0x26, 0xac, 0x81, 0xff},
		{0x27, 0xad, 0x80, 0xff},
		{0x28, 0xae, 0x7f, 0xff},
		{0x29, 0xaf, 0x7f, 0xff},
		{0x2a, 0xb0, 0x7e, 0xff},
		{0x2b, 0xb1, 0x7d, 0xff},
		{0x2c, 0xb1, 0x7d, 0xff},
		{0x2e, 0xb2, 0x7c, 0xff},
		{0x2f, 0xb3, 0x7b, 0xff},
		{0x30, 0xb4, 0x7a, 0xff},
		{0x32, 0xb5, 0x7a, 0xff},
		{0x33, 0xb6, 0x79, 0xff},
		{0x35, 0xb7, 0x78, 0xff},
		{0x36, 0xb8, 0x77, 0xff},
		{0x38, 0xb9, 0x76, 0xff},
		{0x39, 0xb9, 0x76, 0xff},
		{0x3b, 0xba, 0x75, 0xff},
		{0x3d, 0xbb, 0x74, 0xff},
		{0x3e, 0xbc, 0x73, 0xff},
		{0x40, 0xbd, 0x72, 0xff},
		{0x42, 0xbe, 0x71, 0xff},
		{0x44, 0xbe, 0x70, 0xff},
		{0x45, 0xbf, 0x6f, 0xff},
		{0x47, 0xc0, 0x6e, 0xff},
		{0x49, 0xc1, 0x6d, 0xff},
		{0x4b, 0xc2, 0x6c, 0xff},
		{0x4d, 0xc2, 0x6b, 0xff},
		{0x4f, 0xc3, 0x69, 0xff},
		{0x51, 0xc4, 0x68, 0xff},
		{0x53, 0xc5, 0x67, 0xff},
		{0x55, 0xc6, 0x66, 0xff},
		{0x57, 0xc6, 0x65, 0xff},
		{0x59, 0xc7, 0x64, 0xff},
		{0x5b, 0xc8, 0x62, 0xff},
		{0x5e, 0xc9, 0x61, 0xff},
		{0x60, 0xc9, 0x60, 0xff},
		{0x62, 0xca, 0x5f, 0xff},
		{0x64, 0xcb, 0x5d, 0xff},
		{0x67, 0xcc, 0x5c, 0xff},
		{0x69, 0xcc, 0x5b, 0xff},
		{0x6b, 0xcd, 0x59, 0xff},
		{0x6d, 0xce, 0x58, 0xff},
		{0x70, 0xce, 0x56, 0xff},
		{0x72, 0xcf, 0x55, 0xff},
		{0x74, 0xd0, 0x54, 0xff},
		{0x77, 0xd0, 0x52, 0xff},
		{0x79, 0xd1, 0x51, 0xff},
		{0x7c, 0xd2, 0x4f, 0xff},
		{0x7e, 0xd2, 0x4e, 0xff},
		{0x81, 0xd3, 0x4c, 0xff},
		{0x83, 0xd3, 0x4b, 0xff},
		{0x86, 0xd4, 0x49, 0xff},
		{0x88, 0xd5, 0x47, 0xff},
		{0x8b, 0xd5, 0x46, 0xff},
		{0x8d, 0xd6, 0x44, 0xff},
		{0x90, 0xd6, 0x43, 0xff},
		{0x92, 0xd7, 0x41, 0xff},
		{0x95, 0xd7, 0x3f, 0xff},
		{0x97, 0xd8, 0x3e, 0xff},
		{0x9a, 0xd8, 0x3c, 0xff},
		{0x9d, 0xd9, 0x3a, 0xff},
		{0x9f, 0xd9, 0x38, 0xff},
		{0xa2, 0xda, 0x37, 0xff},
		{0xa5, 0xda, 0x35, 0xff},
		{0xa7, 0xdb, 0x33, 0xff},
		{0xaa, 0xdb, 0x32, 0xff},
		{0xad, 0xdc, 0x30, 0xff},
		{0xaf, 0xdc, 0x2e, 0xff},
		{0xb2, 0xdd, 0x2c, 0xff},
		{0xb5, 0xdd, 0x2b, 0xff},
		{0xb7, 0xdd, 0x29, 0xff},
		{0xba, 0xde, 0x27, 0xff},
		{0xbd, 0xde, 0x26, 0xff},
		{0xbf, 0xdf, 0x24, 0xff},
		{0xc2, 0xdf, 0x22, 0xff},
		{0xc5, 0xdf, 0x21, 0xff},
		{0xc7, 0xe0, 0x1f, 0xff},
		{0xca, 0xe0, 0x1e, 0xff},
		{0xcd, 0xe0, 0x1d, 0xff},
		{0xcf, 0xe1, 0x1c, 0xff},
		{0xd2, 0xe1, 0x1b, 0xff},
		{0xd4, 0xe1, 0x1a, 0xff},
		{0xd7, 0xe2, 0x19, 0xff},
		{0xda, 0xe2, 0x18, 0xff},
		{0xdc, 0xe2, 0x18, 0xff},
		{0xdf, 0xe3, 0x18, 0xff},
		{0xe1, 0xe3, 0x18, 0xff},
		{0xe4, 0xe3, 0x18, 0xff},
		{0xe7, 0xe4, 0x19, 0xff},
		{0xe9, 0xe4, 0x19, 0xff},
		{0xec, 0xe4, 0x1a, 0xff},
		{0xee, 0xe5, 0x1b, 0xff},
		{0xf1, 0xe5, 0x1c, 0xff},
		{0xf3, 0xe5, 0x1e, 0xff},
		{0xf6, 0xe6, 0x1f, 0xff},
		{0xf8, 0xe6, 0x21, 0xff},
		{0xfa, 0xe6, 0x22, 0xff},
		{0xfd, 0xe7, 0x24, 0xff},
	}
)

type HSV struct {
	H, S, V int
}

// ToRGB converts a HSV color mode to RGB mode
// mh, ms, mv are used to set the maximum number for HSV.
func (hs HSV) ToRGB(mh, ms, mv int) color.RGBA {
	hs.H = min(hs.H, mh)
	hs.S = min(hs.S, ms)
	hs.V = min(hs.V, mv)

	h, s, v := float64(hs.H)/float64(mh), float64(hs.S)/float64(ms), float64(hs.V)/float64(mv)

	if s == 0 { // HSV from 0 to 1
		return color.RGBA{
			R: uint8(v * 255),
			G: uint8(v * 255),
			B: uint8(v * 255),
			A: 0,
		}
	}

	h *= 6
	if h == 6 {
		h = 0
	} // H must be < 1

	i := Floor(h)
	v1 := v * (1 - s)
	v2 := v * (1 - s*(h-i))
	v3 := v * (1 - s*(1-(h-i)))

	var r, g, b float64
	switch i {
	case 0:
		r, g, b = v, v3, v1
	case 1:
		r, g, b = v2, v, v1
	case 2:
		r, g, b = v1, v, v3
	case 3:
		r, g, b = v1, v2, v
	case 4:
		r, g, b = v3, v1, v
	default:
		r, g, b = v, v1, v2
	}

	return color.RGBA{
		// RGB results from 0 to 255
		R: uint8(r * 255),
		G: uint8(g * 255),
		B: uint8(b * 255),
		A: 0,
	}
}

// ColorRGBA sets the current color. r, g, b, a values should be between 0 and 1, inclusive.
func ColorRGBA(r, g, b, a float64) color.NRGBA {
	return color.NRGBA{
		uint8(r * 255),
		uint8(g * 255),
		uint8(b * 255),
		uint8(a * 255),
	}
}

// ColorRGB sets the current color. r, g, b values should be between 0 and 1,
// inclusive. Alpha will be set to 1 (fully opaque).
func ColorRGB(r, g, b float64) color.Color {
	return ColorRGBA(r, g, b, 1)
}

// ColorRGBA255 sets the current color. r, g, b, a values should be between 0 and 255, inclusive.
func ColorRGBA255(cl color.RGBA, a int) color.NRGBA {
	return color.NRGBA{cl.R, cl.G, cl.B, uint8(a)}
}

// ColorRGB255 sets the current color. r, g, b values should be between 0 and 255, inclusive.
// Alpha will be set to 255 (fully opaque).
func ColorRGB255(r, g, b int) color.NRGBA {
	return ColorRGBA255(color.RGBA{uint8(r), uint8(g), uint8(b), 0}, 255)
}

// ParseHexColor parses color string likes #FFFFFF or #2398EFFF
// Reference: https://stackoverflow.com/questions/54197913/parse-hex-string-to-image-color
func ColorHex(s string) color.RGBA {
	c := color.RGBA{}
	c.A = 255
	ok := true

	hexToByte := func(b byte) byte {
		switch {
		case b >= '0' && b <= '9':
			return b - '0'
		case b >= 'a' && b <= 'f':
			return b - 'a' + 10
		case b >= 'A' && b <= 'F':
			return b - 'A' + 10
		default:
			ok = false
			return 0
		}
	}

	if s[0] == '#' {
		s = s[1:]
	}

	n := len(s)
	switch n {
	case 6, 8:
		c.R = hexToByte(s[0])<<4 + hexToByte(s[1])
		c.G = hexToByte(s[2])<<4 + hexToByte(s[3])
		c.B = hexToByte(s[4])<<4 + hexToByte(s[5])
		if n == 8 {
			c.A = hexToByte(s[6])<<4 + hexToByte(s[7])
		}
	case 3, 4:
		c.R = hexToByte(s[0]) * 17
		c.G = hexToByte(s[1]) * 17
		c.B = hexToByte(s[2]) * 17
		if n == 4 {
			c.A = hexToByte(s[3]) * 17
		}
	default:
		ok = false
	}

	if !ok {
		panic(fmt.Sprintf("invalid hex color string: %s", s))
	}

	return c
}

func ColorLerp(c0, c1 color.Color, t float64) color.Color {
	r0, g0, b0, a0 := c0.RGBA()
	r1, g1, b1, a1 := c1.RGBA()

	return color.RGBA{
		lerp32to8(r0, r1, t),
		lerp32to8(g0, g1, t),
		lerp32to8(b0, b1, t),
		lerp32to8(a0, a1, t),
	}
}

func lerp8(c1, c2 uint32, coeff float64) uint8 {
	return uint8(float64(c1)*(1-coeff) + float64(c2)*coeff)
}

func Mix(src, dst color.Color) color.Color {
	sr, sg, sb, sa := src.RGBA()
	dr, dg, db, da := dst.RGBA()

	aSrc := 1 - float64(sa)/255.0
	return color.RGBA{
		R: lerp8(sr, dr, aSrc),
		G: lerp8(sg, dg, aSrc),
		B: lerp8(sb, db, aSrc),
		A: lerp8(sa, da, aSrc),
	}
}
